<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
// Parts of this code written by Rab Hallett. Some of it
// taken from the Microsoft ADO.NET C# POCO Generator.
// http://blogofrab.blogspot.com
//*********************************************************
// ... and then again extended by Johannes Hoppe
// http://www.johanneshoppe.de
//*********************************************************
#>
<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#

// --------------------------------------------------------------
// Change this line to your EDMX file if you used Add -> New Item
const string inputFile = @"WebNote.edmx";
// --------------------------------------------------------------
// For testing, eg:
//const string inputFile = @"Model1.edmx";

string[] toolInfo = new string[] { "ADO.NET Unit Testable Repository Generator", "0.5" };

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataTools ef = new MetadataTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this);
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

EdmItemCollection ItemCollection = null;
if ( inputFile == "$edmxInputFile" + "$" )
{
    fileManager.Process();
    return "#error The T4 generation file was added to the project by using Add -> New Item, "
         + "but the inputFile string was not changed to the name of the EDMX file. "
         + "Open the \".tt\" file, and change the value of \"inputFile\". Use \"Add Code "
         + "Generation Item\" in the EDMX context menu to avoid this error in future.";
}
else
{
    ItemCollection = loader.CreateEdmItemCollection(inputFile);
}
string namespaceName = code.VsNamespaceSuggestion();

EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return "// No EntityContainer exists in the model, so no code was generated";
}

// 1
WriteHeader();
WriteHeaderQueryableExtension();
WriteNamespaceBegin( code, namespaceName );
WriteQueryableExtension( code, toolInfo );
WriteNamespaceEnd( namespaceName );

// 2
fileManager.StartNewFile( "I" + container.Name + ".cs");
WriteHeader();
WriteHeaderInterface();
WriteNamespaceBegin( code, namespaceName );
WriteInterface( container, code, toolInfo );
WriteNamespaceEnd( namespaceName );

// 3
fileManager.StartNewFile( container.Name + ".cs");
WriteHeader();
WriteHeaderConcreteContextBody();
WriteNamespaceBegin( code, namespaceName );
WriteConcreteContextBody( container, code, ef, region, toolInfo );
WriteNamespaceEnd( namespaceName );

// 4
fileManager.StartNewFile( container.Name + "Mock.cs");
WriteHeader();
WriteHeaderMockContextBody();
//WriteAdditionalUsings( code, new string[] { namespaceName + "." + container + ".MockObjectSet" } );
WriteNamespaceBegin( code, namespaceName + "." + container + "UnitTest" );
WriteMockContextBody( container, code, toolInfo );
WriteNamespaceEnd( namespaceName );

// 5
fileManager.StartNewFile( container.Name + "Mock.ObjectSet.cs");
WriteHeader();
WriteHeaderMockObjectSet();
WriteNamespaceBegin( code, namespaceName + "." + container + "UnitTest" );
WriteMockObjectSet( container, code, toolInfo );
WriteNamespaceEnd( namespaceName );

// 6
fileManager.StartNewFile( container.Name + "PartialRepository.cs");
WriteHeader();
WriteHeaderRepository();
WriteNamespaceBegin( code, namespaceName );
WriteRepository( container, code, toolInfo );
WriteNamespaceEnd( namespaceName );

// 7
fileManager.StartNewFile( container.Name + "BaseRepositoryTest.cs");
WriteHeader();
WriteHeaderTests();
WriteNamespaceBegin( code, namespaceName + "." + container + "UnitTest" );
WriteTest( container, code, toolInfo );
WriteNamespaceEnd( namespaceName );



fileManager.Process();
#>



<#+
// 1
// ***************************************************************************************************
// ***************************************************************************************************
void WriteQueryableExtension( CodeGenerationTools code, string[] toolInfo )
{
#>
/// <summary>
/// Additional extension for interface <code>IQueryable</code>, to
/// allow includes on <code>IObjectSet</code> when using mocking contexts.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("<#=code.Escape(toolInfo[0])#>", "<#=code.Escape(toolInfo[1])#>")]
public static class IQueryableExtension
{
    public static IQueryable<T> Include<T>
        (this IQueryable<T> source, string path)
        where T : class
    {
        ObjectQuery<T> objectQuery = source as ObjectQuery<T>;
        if (objectQuery != null)
        {
            return objectQuery.Include(path);
        }
        return source;
    }
}
<#+
}
#>



<#+
// 2
// ***************************************************************************************************
// ***************************************************************************************************

void WriteInterface( EntityContainer container, CodeGenerationTools code, string[] toolInfo )
{
#>
/// <summary>
/// The interface for the specialised object context. This contains all of
/// the <code>ObjectSet</code> properties that are implemented in both the
/// functional context class and the mock context class.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("<#=code.Escape(toolInfo[0])#>", "<#=code.Escape(toolInfo[1])#>")]
<#=Accessibility.ForType(container)#> interface I<#=code.Escape(container)#>
{
<#+
    foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
#>
    IObjectSet<<#=code.Escape(entitySet.ElementType)#>> <#=code.Escape(entitySet)#> { get; }
<#+
    }
#>

    /// <summary>
    /// Persists all updates to the store.
    /// </summary>
    /// <returns>The number of saved objects</returns>
    int SaveChanges();

}
<#+
}
#>



<#+
// 3
// ***************************************************************************************************
// ***************************************************************************************************

void WriteMockContextBody( EntityContainer container, CodeGenerationTools code, string[] toolInfo )
{
#>
/// <summary>
/// The concrete mock context object that implements the context's interface.
/// Provide an instance of this mock context class to client logic when testing, 
/// instead of providing a functional context object.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("<#=code.Escape(toolInfo[0])#>", "<#=code.Escape(toolInfo[1])#>")]
<#=Accessibility.ForType(container)#> partial class <#=code.Escape(container)#>Mock : I<#=code.Escape(container)#>
{
<#+
        foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
        {
#>
    <#=Accessibility.ForReadOnlyProperty(entitySet)#> IObjectSet<<#=code.Escape(entitySet.ElementType)#>> <#=code.Escape(entitySet)#>
    {
        get { return <#=code.FieldName(entitySet) #>  ?? (<#=code.FieldName(entitySet)#> = new MockObjectSet<<#=code.Escape(entitySet.ElementType)#>>()); }
        set { <#=code.FieldName(entitySet) #>  = value; }
    }
    private IObjectSet<<#=code.Escape(entitySet.ElementType)#>> <#=code.FieldName(entitySet)#>;
    
    
<#+
        }
#>
    
     /// <summary>
    /// Will be true if SaveChanges was called
    /// </summary>	
    public bool SavesChanged { get; set; }

    /// <summary>
    /// Would persist all updates to the store.
    /// </summary>
    /// <returns>would return the number of saved objects, here: always '1'</returns>
    public int SaveChanges()
    {
        this.SavesChanged = true;
        return 1; // of course, this is not always the correct number, don't test for that!
    }
}
<#+
}
#>



<#+
// 4
// ***************************************************************************************************
// ***************************************************************************************************

void WriteConcreteContextBody( EntityContainer container, CodeGenerationTools code, MetadataTools ef, CodeRegion region, string[] toolInfo )
{

#>
/// <summary>
/// The functional concrete object context. This is just like the normal
/// context that would be generated using the POCO artefact generator, 
/// apart from the fact that this one implements an interface containing 
/// the entity set properties and exposes <code>IObjectSet</code>
/// instances for entity set properties.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("<#=code.Escape(toolInfo[0])#>", "<#=code.Escape(toolInfo[1])#>")]
<#=Accessibility.ForType(container)#> partial class <#=code.Escape(container)#> : ObjectContext, I<#=code.Escape(container)#> 
{
    public const string ConnectionString = "name=<#=container.Name#>";
    public const string ContainerName = "<#=container.Name#>";

    #region Constructors

	#if !DO_NOT_USE_UNITY
	[InjectionConstructor]	
	#endif
    public <#=code.Escape(container)#>():
        base(ConnectionString, ContainerName)
    {
<#+
        WriteLazyLoadingEnabled(container);
#>
    }

    public <#=code.Escape(container)#>(string connectionString):
        base(connectionString, ContainerName)
    {
<#+
        WriteLazyLoadingEnabled(container);
#>
    }

    public <#=code.Escape(container)#>(EntityConnection connection):
        base(connection, ContainerName)
    {
<#+
        WriteLazyLoadingEnabled(container);
#>
    }

    #endregion

<#+
        region.Begin("ObjectSet Properties", 2);

        foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
        {
#>

    <#=Accessibility.ForReadOnlyProperty(entitySet)#> IObjectSet<<#=code.Escape(entitySet.ElementType)#>> <#=code.Escape(entitySet)#>
    {
        get { return <#=code.FieldName(entitySet) #> ?? (<#=code.FieldName(entitySet)#> = CreateObjectSet<<#=code.Escape(entitySet.ElementType)#>>("<#=entitySet.Name#>")); }
    }
    private ObjectSet<<#=code.Escape(entitySet.ElementType)#>> <#=code.FieldName(entitySet)#>;
<#+
        }

        region.End();

        region.Begin("Function Imports");

        foreach (EdmFunction edmFunction in container.FunctionImports)
        {
            var parameters = FunctionImportParameter.Create(edmFunction.Parameters, code, ef);
            string paramList = String.Join(", ", parameters.Select(p => p.FunctionParameterType + " " + p.FunctionParameterName).ToArray());
            if (edmFunction.ReturnParameter == null)
            {
                continue;
            }
            string returnTypeElement = code.Escape(ef.GetElementType(edmFunction.ReturnParameter.TypeUsage));

#>
    <#=Accessibility.ForMethod(edmFunction)#> ObjectResult<<#=returnTypeElement#>> <#=code.Escape(edmFunction)#>(<#=paramList#>)
    {
<#+
            foreach (var parameter in parameters)
            {
                if (!parameter.NeedsLocalVariable)
                {
                    continue;
                }
#>

        ObjectParameter <#=parameter.LocalVariableName#>;

        if (<#=parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null"#>)
        {
            <#=parameter.LocalVariableName#> = new ObjectParameter("<#=parameter.EsqlParameterName#>", <#=parameter.FunctionParameterName#>);
        }
        else
        {
            <#=parameter.LocalVariableName#> = new ObjectParameter("<#=parameter.EsqlParameterName#>", typeof(<#=parameter.RawClrTypeName#>));
        }
<#+
            }
#>
        return base.ExecuteFunction<<#=returnTypeElement#>>("<#=edmFunction.Name#>"<#=code.StringBefore(", ", String.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()))#>);
    }
<#+
        }

        region.End();
#>
}
<#+
}
#>

<#+
private void WriteLazyLoadingEnabled(EntityContainer container)
{
   string lazyLoadingAttributeValue = null;
   string lazyLoadingAttributeName = MetadataConstants.EDM_ANNOTATION_09_02 + ":LazyLoadingEnabled";
   if(MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, out lazyLoadingAttributeValue))
   {
       bool isLazyLoading = false;
       if(bool.TryParse(lazyLoadingAttributeValue, out isLazyLoading))
       {
#>
        this.ContextOptions.LazyLoadingEnabled = <#=isLazyLoading.ToString().ToLowerInvariant()#>;
<#+
       }
   }
}
#>



<#+
// 5
// ***************************************************************************************************
// ***************************************************************************************************

void WriteMockObjectSet( EntityContainer container, CodeGenerationTools code, string[] toolInfo )
{
#>
/// <summary>
/// Concrete object set for use with Mock contexts. Implements all of the
/// required interfaces, but performs no database functionality; instead
/// merely stores the data for testing.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("<#=code.Escape(toolInfo[0])#>", "<#=code.Escape(toolInfo[1])#>")]
<#=Accessibility.ForType(container)#> partial class MockObjectSet<T> : IObjectSet <T> 
    where T : class
{

    private readonly HashSet<T> data;
    private readonly IQueryable<T> queryableData;
    private const string IdString = "ID";

    /// <summary>
    /// Initializes a new instance of the <see cref="MockObjectSet{T}"/> class.
    /// </summary>
    public MockObjectSet()
        : this(Enumerable.Empty<T>())
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MockObjectSet{T}"/> class.
    /// </summary>
    /// <param name="testData">
    /// The test data.
    /// </param>
    public MockObjectSet(IEnumerable<T> testData)
    {
        this.data = new HashSet<T>(testData);
        this.queryableData = this.data.AsQueryable();
    }

    /// <summary>
    /// Gets the type of the element(s) that are returned when the expression tree associated with this instance of System.Linq.IQueryable is executed.
    /// </summary>
    public Type ElementType
    {
        get { return this.queryableData.ElementType; }
    }

    /// <summary>
    /// Gets the expression tree that is associated with the instance of System.Linq.IQueryable.
    /// </summary>
    public Expression Expression
    {
        get { return this.queryableData.Expression; }
    }

    /// <summary>
    /// Gets the query provider that is associated with this data source.
    /// </summary>
    public IQueryProvider Provider
    {
        get { return this.queryableData.Provider; }
    }

    /// <summary>
    /// Notifies the set that an object that represents a new entity must be added to the set.
    /// </summary>
    /// <param name="entity">The new object to add to the set.</param>
    public void AddObject(T entity)
    {
        // emulates an auto-increment primary key
        if (HasIdProperty())
        {
            this.AutoIncrementIdProperty(entity);
        }
        
        // add the entity to the context
        this.data.Add(entity);
    }

    /// <summary>
    /// Notifies the set that an object that represents an existing entity must be added to the set.
    /// </summary>
    /// <param name="entity">The existing object to add to the set.</param>
    public void Attach(T entity)
    {
        this.data.Add(entity);
    }

    /// <summary>
    /// Notifies the set that an object that represents an existing entity must be deleted from the set.
    /// </summary>
    /// <param name="entity">The existing object to delete from the set.</param>
    public void DeleteObject(T entity)
    {
        this.data.Remove(entity);
    }

    /// <summary>
    /// Notifies the set that an object that represents an existing entity must be detached from the set.
    /// </summary>
    /// <param name="entity">The object to detach from the set.</param>
    public void Detach(T entity)
    {
        this.data.Remove(entity);
    }

    /// <summary>
    /// Exposes the enumerator, which supports a simple iteration over a non-generic collection.
    /// </summary>
    /// <returns>The exposed enumerator.</returns>
    public IEnumerator<T> GetEnumerator()
    {
        return this.data.GetEnumerator();
    }

    /// <summary>
    /// Exposes the enumerator, which supports a simple iteration over a non-generic collection.
    /// </summary>
    /// <returns>The exposed enumerator.</returns>
    IEnumerator IEnumerable.GetEnumerator()
    {
        return this.GetEnumerator();
    }

    #region AutoIncrementIdProperty

    /// <summary>
    /// returns true if there is an property that ends with the string "Id" (case insensitive)
    /// </summary>
    /// <returns>
    /// true if there is an property that ends with the string "Id" (case insensitive), otherwise false
    /// </returns>
    private static bool HasIdProperty()
    {
        return GetIdProperty() != null;
    }

    /// <summary>
    /// returns the frist property that ends with the string "Id" (case insensitive)
    /// </summary>
    /// <returns>the frist property that ends with the string "Id" OR NULL</returns>
    private static PropertyInfo GetIdProperty()
    {
        PropertyInfo[] infos = typeof(T).GetProperties();
        return infos.FirstOrDefault(pi => pi.Name.EndsWith(IdString, StringComparison.OrdinalIgnoreCase));
    }

    /// <summary>
    /// searches for the highest id from the faked database and assignes the next one;
    /// uses the first property that ends with the string "Id" (case insensitive)
    /// </summary>
    /// <remarks>does nothing on no match</remarks>
    /// <param name="entity">The entity.</param>
    private void AutoIncrementIdProperty(T entity)
    {
        PropertyInfo propInf = GetIdProperty();

        if (propInf == null)
        {
            return;
        }

        int highestId = 0;

        foreach (T e in this.data)
        {
            int currentId = Convert.ToInt32(propInf.GetValue(e, null), CultureInfo.InvariantCulture);
            highestId = currentId > highestId ? currentId : highestId;
        }

        // set the value to next id
        propInf.SetValue(entity, highestId + 1, null);
    }

    #endregion
}
<#+
}
#>



<#+
// 6
// ***************************************************************************************************
// ***************************************************************************************************

void WriteRepository( EntityContainer container, CodeGenerationTools code, string[] toolInfo )
{
#>
/// <summary>Repository</summary>
[System.CodeDom.Compiler.GeneratedCode("<#=code.Escape(toolInfo[0])#>", "<#=code.Escape(toolInfo[1])#>")]
<#=Accessibility.ForType(container)#> partial class <#=code.Escape(container)#>Repository
{

    /// <summary>
    /// Gets or sets the specialised object context
    /// </summary>
    /// <value>object context</value>
	#if !DO_NOT_USE_UNITY
    [Dependency]
	#endif
    public I<#=code.Escape(container)#> Context { get; set; }
}
<#+
}
#>



<#+
// 7
// ***************************************************************************************************
// ***************************************************************************************************

void WriteTest( EntityContainer container, CodeGenerationTools code, string[] toolInfo )
{
#>
/// <summary>Unit test for Repository - to be inherited!</summary>
[System.CodeDom.Compiler.GeneratedCode("<#=code.Escape(toolInfo[0])#>", "<#=code.Escape(toolInfo[1])#>")]
[TestClass]
<#=Accessibility.ForType(container)#> abstract class <#=code.Escape(container)#>BaseRepositoryTest
{
    /// <summary>
    /// Gets the mocked context
    /// </summary>
    /// <value>mocked context</value>	
    public <#=code.Escape(container)#>Mock Context { get; set; }
    
    /// <summary>
    /// Gets the repository to test
    /// </summary>
    /// <value>initialized repository.</value>
    public <#=code.Escape(container)#>Repository Repository  { get; set; }

    /// <summary>
    /// Set up mocks
    /// </summary>
    [TestInitialize]
    public void InitializeRepository()
    {
        
        Context = new <#=code.Escape(container)#>Mock();
<#+
        foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
        {
#>
        Context.<#=code.Escape(entitySet)#> = new MockObjectSet<<#=code.Escape(entitySet.ElementType)#>>(Create<#=code.Escape(entitySet)#>List());
<#+
        }
#>
        
        Repository = new <#=code.Escape(container)#>Repository { Context = Context };

    }

    /// <summary>
    /// Remove mocks
    /// </summary>
    [TestCleanup]
    public void CleanupRepository()
    {
        Context = null;
        Repository = null;
    }
    
<#+
        foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
        {
#>
    /// <summary>
    /// Method should return a collection for the MockObjectSet - to be implemented!
    /// </summary>
    public abstract List<<#=code.Escape(entitySet.ElementType)#>> Create<#=code.Escape(entitySet)#>List();		

<#+
        }
#>	
}
<#+
}
#>


<#+
// ***************************************************************************************************
// ***************************************************************************************************

void WriteHeader()
{
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#+
}
#>



<#+
// 1
void WriteHeaderQueryableExtension()
{
#>
using System.Linq;
using System.Data.Objects;
<#+
}
#>



<#+
// 2
void WriteHeaderInterface()
{
#>
using System.Data.Objects;
<#+
}
#>



<#+
// 3
void WriteHeaderConcreteContextBody()
{
#>
using System.Data.EntityClient;
using System.Data.Objects;
#if !DO_NOT_USE_UNITY
using Microsoft.Practices.Unity;
#endif
<#+
}
#>



<#+
//4
void WriteHeaderMockContextBody()
{
#>
using System.Data.Objects;
<#+
}
#>



<#+
// 5
void WriteHeaderMockObjectSet()
{
#>
using System;
using System.Globalization;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Data.Objects;
using System.Linq.Expressions;
using System.Reflection;
<#+
}
#>



<#+
// 6
void WriteHeaderRepository()
{
#>
#if !DO_NOT_USE_UNITY
// Download Unity 1.2: http://unity.codeplex.com/releases/view/18855
//                     http://msdn.microsoft.com/en-us/library/dd203104.aspx
// Name: Microsoft.Practices.Unity
// Path: %ProgramFiles(x86)%\Microsoft Unity Application Block 1.2\Bin
using Microsoft.Practices.Unity;
#endif
<#+
}
#>



<#+
// 7
void WriteHeaderTests()
{
#>
using System.Collections.Generic;
// Name: Microsoft.VisualStudio.QualityTools.UnitTestFramework
// Path: %ProgramFiles(x86)%\Microsoft Visual Studio 10.0\Common7\IDE\PublicAssemblies\Microsoft.VisualStudio.QualityTools.UnitTestFramework.dll
using Microsoft.VisualStudio.TestTools.UnitTesting;
<#+
}
#>



<#+
void WriteAdditionalUsings( CodeGenerationTools code, string[] additionalUsings )
{
    if ( additionalUsings != null )
    {
        foreach( string additionalUsing in additionalUsings )
        {
#>
using <#=code.EscapeNamespace(additionalUsing)#>;
<#+
        }
    }
}
#>



<#+
void WriteNamespaceBegin( CodeGenerationTools code, string namespaceName )
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>

namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}
#>



<#+
void WriteNamespaceEnd( string namespaceName )
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}
#>
