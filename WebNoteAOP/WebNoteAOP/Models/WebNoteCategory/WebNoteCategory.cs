//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.EntityClient;
using System.Data.Objects;
#if !DO_NOT_USE_UNITY
using Microsoft.Practices.Unity;
#endif

namespace WebNoteAOP.Models.WebNoteCategory
{
    /// <summary>
    /// The functional concrete object context. This is just like the normal
    /// context that would be generated using the POCO artefact generator, 
    /// apart from the fact that this one implements an interface containing 
    /// the entity set properties and exposes <code>IObjectSet</code>
    /// instances for entity set properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("ADO.NET Unit Testable Repository Generator", "0.5")]
    public partial class WebNoteCategory : ObjectContext, IWebNoteCategory 
    {
        public const string ConnectionString = "name=WebNoteCategory";
        public const string ContainerName = "WebNoteCategory";
    
        #region Constructors
    
    	#if !DO_NOT_USE_UNITY
    	[InjectionConstructor]	
    	#endif
        public WebNoteCategory():
            base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public WebNoteCategory(string connectionString):
            base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public WebNoteCategory(EntityConnection connection):
            base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public IObjectSet<Category> Categories
        {
            get { return _categories ?? (_categories = CreateObjectSet<Category>("Categories")); }
        }
        private ObjectSet<Category> _categories;
    
        public IObjectSet<CategoryToNode> CategoryToNodes
        {
            get { return _categoryToNodes ?? (_categoryToNodes = CreateObjectSet<CategoryToNode>("CategoryToNodes")); }
        }
        private ObjectSet<CategoryToNode> _categoryToNodes;

        #endregion
    }
}
