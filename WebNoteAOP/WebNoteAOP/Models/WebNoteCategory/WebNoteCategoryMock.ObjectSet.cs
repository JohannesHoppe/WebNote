//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Globalization;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Data.Objects;
using System.Linq.Expressions;
using System.Reflection;

namespace WebNoteAOP.Models.WebNoteCategory.WebNoteCategoryUnitTest
{
    /// <summary>
    /// Concrete object set for use with Mock contexts. Implements all of the
    /// required interfaces, but performs no database functionality; instead
    /// merely stores the data for testing.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("ADO.NET Unit Testable Repository Generator", "0.5")]
    public partial class MockObjectSet<T> : IObjectSet <T> 
        where T : class
    {
    
        private readonly HashSet<T> data;
        private readonly IQueryable<T> queryableData;
        private const string IdString = "ID";
    
        /// <summary>
        /// Initializes a new instance of the <see cref="MockObjectSet{T}"/> class.
        /// </summary>
        public MockObjectSet()
            : this(Enumerable.Empty<T>())
        {
        }
    
        /// <summary>
        /// Initializes a new instance of the <see cref="MockObjectSet{T}"/> class.
        /// </summary>
        /// <param name="testData">
        /// The test data.
        /// </param>
        public MockObjectSet(IEnumerable<T> testData)
        {
            this.data = new HashSet<T>(testData);
            this.queryableData = this.data.AsQueryable();
        }
    
        /// <summary>
        /// Gets the type of the element(s) that are returned when the expression tree associated with this instance of System.Linq.IQueryable is executed.
        /// </summary>
        public Type ElementType
        {
            get { return this.queryableData.ElementType; }
        }
    
        /// <summary>
        /// Gets the expression tree that is associated with the instance of System.Linq.IQueryable.
        /// </summary>
        public Expression Expression
        {
            get { return this.queryableData.Expression; }
        }
    
        /// <summary>
        /// Gets the query provider that is associated with this data source.
        /// </summary>
        public IQueryProvider Provider
        {
            get { return this.queryableData.Provider; }
        }
    
        /// <summary>
        /// Notifies the set that an object that represents a new entity must be added to the set.
        /// </summary>
        /// <param name="entity">The new object to add to the set.</param>
        public void AddObject(T entity)
        {
            // emulates an auto-increment primary key
            if (HasIdProperty())
            {
                this.AutoIncrementIdProperty(entity);
            }
            
            // add the entity to the context
            this.data.Add(entity);
        }
    
        /// <summary>
        /// Notifies the set that an object that represents an existing entity must be added to the set.
        /// </summary>
        /// <param name="entity">The existing object to add to the set.</param>
        public void Attach(T entity)
        {
            this.data.Add(entity);
        }
    
        /// <summary>
        /// Notifies the set that an object that represents an existing entity must be deleted from the set.
        /// </summary>
        /// <param name="entity">The existing object to delete from the set.</param>
        public void DeleteObject(T entity)
        {
            this.data.Remove(entity);
        }
    
        /// <summary>
        /// Notifies the set that an object that represents an existing entity must be detached from the set.
        /// </summary>
        /// <param name="entity">The object to detach from the set.</param>
        public void Detach(T entity)
        {
            this.data.Remove(entity);
        }
    
        /// <summary>
        /// Exposes the enumerator, which supports a simple iteration over a non-generic collection.
        /// </summary>
        /// <returns>The exposed enumerator.</returns>
        public IEnumerator<T> GetEnumerator()
        {
            return this.data.GetEnumerator();
        }
    
        /// <summary>
        /// Exposes the enumerator, which supports a simple iteration over a non-generic collection.
        /// </summary>
        /// <returns>The exposed enumerator.</returns>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    
        #region AutoIncrementIdProperty
    
        /// <summary>
        /// returns true if there is an property that ends with the string "Id" (case insensitive)
        /// </summary>
        /// <returns>
        /// true if there is an property that ends with the string "Id" (case insensitive), otherwise false
        /// </returns>
        private static bool HasIdProperty()
        {
            return GetIdProperty() != null;
        }
    
        /// <summary>
        /// returns the frist property that ends with the string "Id" (case insensitive)
        /// </summary>
        /// <returns>the frist property that ends with the string "Id" OR NULL</returns>
        private static PropertyInfo GetIdProperty()
        {
            PropertyInfo[] infos = typeof(T).GetProperties();
            return infos.FirstOrDefault(pi => pi.Name.EndsWith(IdString, StringComparison.OrdinalIgnoreCase));
        }
    
        /// <summary>
        /// searches for the highest id from the faked database and assignes the next one;
        /// uses the first property that ends with the string "Id" (case insensitive)
        /// </summary>
        /// <remarks>does nothing on no match</remarks>
        /// <param name="entity">The entity.</param>
        private void AutoIncrementIdProperty(T entity)
        {
            PropertyInfo propInf = GetIdProperty();
    
            if (propInf == null)
            {
                return;
            }
    
            int highestId = 0;
    
            foreach (T e in this.data)
            {
                int currentId = Convert.ToInt32(propInf.GetValue(e, null), CultureInfo.InvariantCulture);
                highestId = currentId > highestId ? currentId : highestId;
            }
    
            // set the value to next id
            propInf.SetValue(entity, highestId + 1, null);
        }
    
        #endregion
    }
}
